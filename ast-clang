#!/usr/bin/env python

# ===-- klee-clang --------------------------------------------------------===##
# 
#                      The KLEE Symbolic Virtual Machine
# 
#  This file is distributed under the University of Illinois Open Source
#  License. See LICENSE.TXT for details.
# 
# ===----------------------------------------------------------------------===##

import os, sys
import subprocess
import re

def isLinkCommand():
    # Look for '-Wl,' as a signal that we are calling the linker. What a hack.
    for arg in sys.argv:
        if arg.startswith('-Wl,'):
            return True

def main():
    dirName = "./tmp"
    astFileName = "astList.txt"
    if not os.path.isdir(dirName):
        os.mkdir(dirName)
    llvm_path = subprocess.Popen(["llvm-config", "--bindir"], stdout=subprocess.PIPE).communicate()[0].strip().decode("utf-8")

    tmpArgv = " ".join(sys.argv)
    #print(tmpArgv)
    astArgv = " ".join(sys.argv[1:])
    m = re.search('-o (\S+)', astArgv)                                                                           
    output = ""
    if m and m.group(1):
        output = m.group(1)
    if output != "":
        astArgv = astArgv.replace("-o "+output, "-o ./tmp/" + os.path.basename(output) + ".ast")
    clangver = "clang"
    if "c++" in tmpArgv or ".cpp" in tmpArgv:
        clangver = "clang++"
    astArgv = llvm_path+"/"+clangver + " -emit-ast " + astArgv
    #print(astArgv)
    if not isLinkCommand():
        #when compiling
        subprocess.call(astArgv, shell=True)
        if os.path.exists(astFileName):
            os.remove(astFileName)
    else:
        #when linking
        if not os.path.exists(astFileName):
            subprocess.call("find -path \"*/tmp/*\" -name \"*.ast\" > " + astFileName, shell=True)
    #os.execvp(llvm_path+"/clang", ["-emit-ast"] + sys.argv[1:])
    os.execvp(llvm_path+"/"+clangver, [clangver]+sys.argv[1:])

    return 1

if __name__ == '__main__':
    main()
